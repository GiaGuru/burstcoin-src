/*   1:    */ package fr.cryptohash;
/*   2:    */ 
/*   3:    */ public class MD2
/*   4:    */   extends DigestEngine
/*   5:    */ {
/*   6: 51 */   private static final int[] S = { 41, 46, 67, 201, 162, 216, 124, 1, 61, 54, 84, 161, 236, 240, 6, 19, 98, 167, 5, 243, 192, 199, 115, 140, 152, 147, 43, 217, 188, 76, 130, 202, 30, 155, 87, 60, 253, 212, 224, 22, 103, 66, 111, 24, 138, 23, 229, 18, 190, 78, 196, 214, 218, 158, 222, 73, 160, 251, 245, 142, 187, 47, 238, 122, 169, 104, 121, 145, 21, 178, 7, 63, 148, 194, 16, 137, 11, 34, 95, 33, 128, 127, 93, 154, 90, 144, 50, 39, 53, 62, 204, 231, 191, 247, 151, 3, 255, 25, 48, 179, 72, 165, 181, 209, 215, 94, 146, 42, 172, 86, 170, 198, 79, 184, 56, 210, 150, 164, 125, 182, 118, 252, 107, 226, 156, 116, 4, 241, 69, 157, 112, 89, 100, 113, 135, 32, 134, 91, 207, 101, 230, 45, 168, 2, 27, 96, 37, 173, 174, 176, 185, 246, 28, 70, 97, 105, 52, 64, 126, 15, 85, 71, 163, 35, 221, 81, 175, 58, 195, 92, 249, 206, 186, 197, 234, 38, 44, 83, 13, 110, 133, 40, 132, 9, 211, 223, 205, 244, 65, 129, 77, 82, 106, 220, 55, 200, 108, 193, 171, 250, 36, 225, 123, 8, 12, 189, 177, 74, 120, 136, 149, 139, 227, 99, 232, 109, 233, 203, 213, 254, 59, 0, 29, 57, 242, 239, 183, 14, 102, 88, 208, 228, 166, 119, 114, 248, 235, 117, 75, 10, 49, 68, 80, 180, 143, 237, 31, 26, 219, 153, 141, 51, 159, 17, 131, 20 };
/*   7:    */   private int[] X;
/*   8:    */   private int[] C;
/*   9:    */   private byte[] D;
/*  10:    */   private int L;
/*  11:    */   
/*  12:    */   public Digest copy()
/*  13:    */   {
/*  14: 93 */     MD2 localMD2 = new MD2();
/*  15: 94 */     System.arraycopy(this.X, 0, localMD2.X, 0, this.X.length);
/*  16: 95 */     System.arraycopy(this.C, 0, localMD2.C, 0, this.C.length);
/*  17: 96 */     localMD2.L = this.L;
/*  18: 97 */     return copyState(localMD2);
/*  19:    */   }
/*  20:    */   
/*  21:    */   public int getDigestLength()
/*  22:    */   {
/*  23:103 */     return 16;
/*  24:    */   }
/*  25:    */   
/*  26:    */   public int getBlockLength()
/*  27:    */   {
/*  28:109 */     return 16;
/*  29:    */   }
/*  30:    */   
/*  31:    */   protected void engineReset()
/*  32:    */   {
/*  33:115 */     for (int i = 0; i < 16; i++)
/*  34:    */     {
/*  35:116 */       this.X[i] = 0;
/*  36:117 */       this.C[i] = 0;
/*  37:    */     }
/*  38:119 */     this.L = 0;
/*  39:    */   }
/*  40:    */   
/*  41:    */   protected void doPadding(byte[] paramArrayOfByte, int paramInt)
/*  42:    */   {
/*  43:125 */     int i = flush();
/*  44:126 */     for (int j = 0; j < 16 - i; j++) {
/*  45:127 */       update((byte)(16 - i));
/*  46:    */     }
/*  47:128 */     flush();
/*  48:129 */     for (j = 0; j < 16; j++) {
/*  49:130 */       this.D[j] = ((byte)this.C[j]);
/*  50:    */     }
/*  51:131 */     processBlock(this.D);
/*  52:132 */     for (j = 0; j < 16; j++) {
/*  53:133 */       paramArrayOfByte[(paramInt + j)] = ((byte)this.X[j]);
/*  54:    */     }
/*  55:    */   }
/*  56:    */   
/*  57:    */   protected void doInit()
/*  58:    */   {
/*  59:139 */     this.X = new int[48];
/*  60:140 */     this.C = new int[16];
/*  61:141 */     this.D = new byte[16];
/*  62:142 */     engineReset();
/*  63:    */   }
/*  64:    */   
/*  65:    */   protected void processBlock(byte[] paramArrayOfByte)
/*  66:    */   {
/*  67:148 */     int i = this.L;
/*  68:149 */     for (int j = 0; j < 16; j++)
/*  69:    */     {
/*  70:150 */       k = paramArrayOfByte[j] & 0xFF;
/*  71:151 */       this.X[(16 + j)] = k;
/*  72:152 */       this.X[(32 + j)] = (this.X[j] ^ k);
/*  73:153 */       i = this.C[j] ^= S[(k ^ i)];
/*  74:    */     }
/*  75:155 */     this.L = i;
/*  76:156 */     j = 0;
/*  77:157 */     for (int k = 0; k < 18; k++)
/*  78:    */     {
/*  79:158 */       for (int m = 0; m < 48; m += 8)
/*  80:    */       {
/*  81:159 */         j = this.X[(m + 0)] ^= S[j];
/*  82:160 */         j = this.X[(m + 1)] ^= S[j];
/*  83:161 */         j = this.X[(m + 2)] ^= S[j];
/*  84:162 */         j = this.X[(m + 3)] ^= S[j];
/*  85:163 */         j = this.X[(m + 4)] ^= S[j];
/*  86:164 */         j = this.X[(m + 5)] ^= S[j];
/*  87:165 */         j = this.X[(m + 6)] ^= S[j];
/*  88:166 */         j = this.X[(m + 7)] ^= S[j];
/*  89:    */       }
/*  90:168 */       j = j + k & 0xFF;
/*  91:    */     }
/*  92:    */   }
/*  93:    */   
/*  94:    */   public String toString()
/*  95:    */   {
/*  96:175 */     return "MD2";
/*  97:    */   }
/*  98:    */ }


/* Location:           E:\java decompi;er\burst.jar
 * Qualified Name:     fr.cryptohash.MD2
 * JD-Core Version:    0.7.1
 */